{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Money guard app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Money Guard App"
  },
  "servers": [
    {
      "url": "https://server-money-guard-teamproject.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Users",
      "description": "Operation about users."
    },
    {
      "name": "Transactions",
      "description": "Operations about tramsactions."
    },
    {
      "name": "Summary",
      "description": "Summary info about user transactions"
    },
    {
      "name": "Categories",
      "description": "Get all categories"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "Register a new user using email and password",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User`s name. Should be 3-20 characters long.",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User`s email address. Email must be a valid email address. Must be less then 64 characters.",
                    "type": "string",
                    "example": "nelson89@gmail.com"
                  },
                  "password": {
                    "description": "User password Should be 8-64 characters long.",
                    "type": "string",
                    "example": "querty1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "6611234567890abc123456789"
                            },
                            "name": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "nelson89@gmail.com"
                            },
                            "balance": {
                              "type": "number",
                              "example": 0
                            }
                          }
                        },
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token",
                          "example": "M8UavAGWqMJiC5qPStjpa7WefmGlViYYNMnUzfsv"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "\"email\" is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Email is in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "array",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login an existing user using email and password",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User`s email address. Email must be a valid email address.",
                    "type": "string",
                    "example": "nelson89@gmail.com"
                  },
                  "password": {
                    "description": "User`s password.",
                    "type": "string",
                    "example": "querty1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "6611234567890abc123456789"
                            },
                            "name": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "nelson89@gmail.com"
                            },
                            "balance": {
                              "type": "number",
                              "example": 0
                            }
                          }
                        },
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token",
                          "example": "M8UavAGWqMJiC5qPStjpa7WefmGlViYYNMnUzfsv"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Email or password is incorrect"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the authenticated user by clearing the session ID and refresh token cookies.",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "167f69ad009f0dbf4d848c0fa"
            },
            "description": "User’s session ID. Backend-generated unique identifier."
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string",
              "example": "s0meRefre5hT0kenBase64"
            },
            "description": "Backend-generated unique refresh token."
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out user. No content returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Missing or invalid sessionId or refreshToken."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get information about user",
        "operationId": "getUserData",
        "description": "Get information about user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User data fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User data fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Edit user name",
        "operationId": "patchUserName",
        "description": "Edit user name with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Name updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Name updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user avatar",
        "operationId": "addUserAvatar",
        "description": "Update user avatar with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "avatar"
                ],
                "properties": {
                  "avatar": {
                    "description": "User avatar",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user avatar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Avatar updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get list of transactions",
        "operationId": "getTransactions",
        "description": "Get list of Transactions with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "example": "dd-mm-yyy",
              "description": "All transactions from date"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": [
                "Main expenses",
                "Products",
                "Car",
                "Self care",
                "Child care",
                "Household products",
                "Education",
                "Leisure",
                "Other expenses",
                "Entertaiment"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found transactions!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found transactions!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/transaction"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create Transaction",
        "operationId": "createTransaction",
        "description": "Create a transaction with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "type",
                  "sum",
                  "category",
                  "userId"
                ],
                "properties": {
                  "date": {
                    "description": "transaction's date",
                    "type": "string",
                    "example": "dd-mm-yyyy"
                  },
                  "type": {
                    "description": "transaction's type",
                    "type": "string",
                    "example": "+"
                  },
                  "category": {
                    "description": "transaction's category",
                    "type": "string",
                    "enum": [
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertaiment"
                    ]
                  },
                  "comment": {
                    "description": "transaction's comment",
                    "type": "string",
                    "example": "payment for first semester"
                  },
                  "sum": {
                    "description": "transaction's sum",
                    "type": "number",
                    "example": 1000
                  },
                  "userId": {
                    "description": "transaction's user id",
                    "type": "string",
                    "example": "65e4decdd286b30065d54af9"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction Successfully Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction by id",
        "operationId": "getTransaction",
        "description": "Get Transaction by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get transaction by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found transaction with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update transaction",
        "operationId": "updateTransaction",
        "description": "Update a transaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "transaction's date",
                    "type": "string",
                    "example": "dd-mm-yyyy"
                  },
                  "type": {
                    "description": "transaction's type",
                    "type": "string",
                    "example": "-"
                  },
                  "category": {
                    "description": "transaction's category",
                    "type": "string",
                    "enum": [
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertaiment"
                    ]
                  },
                  "comment": {
                    "description": "transaction's comment",
                    "type": "string",
                    "example": "payment for first semester"
                  },
                  "sum": {
                    "description": "transaction's sum",
                    "type": "number",
                    "example": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete transaction",
        "operationId": "deleteTransactionByID",
        "description": "Delete a Transaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction was deleted"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/summary": {
      "get": {
        "tags": [
          "Summary"
        ],
        "summary": "Get list of transaction's summary",
        "operationId": "getSummary",
        "description": "Get list of Transaction`s summary with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "example": "mm-yyyy",
              "description": "All transaction's summary from date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found transaction's summary!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found transaction's summary!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/summary"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get list of categories",
        "operationId": "getCategories",
        "description": "Get list of categories",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found categories"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Main expenses"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Route not found"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User`s name. Should be 3-20 characters long.",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User`s email address. Email must be a valid email address.",
            "type": "string",
            "example": "john_doe@mail.com"
          },
          "password": {
            "description": "User password Should be 8-64 characters long.",
            "type": "string",
            "example": "qwerty123"
          },
          "balance": {
            "description": "User balance",
            "type": "number",
            "default": 0
          },
          "avatar": {
            "description": "User avatar",
            "type": "string",
            "default": null
          }
        }
      },
      "transaction": {
        "type": "object",
        "required": [
          "_id",
          "date",
          "type",
          "sum",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "transaction's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "date": {
            "description": "transaction's date",
            "type": "string",
            "example": "22-12-2025"
          },
          "type": {
            "description": "transaction's type",
            "type": "string",
            "example": "+"
          },
          "category": {
            "description": "transaction's category",
            "type": "string",
            "enum": [
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertaiment",
              "Income"
            ]
          },
          "comment": {
            "description": "transaction's comment",
            "type": "string",
            "example": "payment for first semester"
          },
          "sum": {
            "description": "transaction's sum",
            "type": "number",
            "example": 1000
          },
          "userId": {
            "description": "transaction's user id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          }
        }
      },
      "summary": {
        "type": "object",
        "properties": {
          "total": {
            "description": "transaction's id",
            "type": "number",
            "example": 111111
          },
          "category": {
            "description": "transaction's date",
            "type": "string",
            "enum": [
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertaiment"
            ]
          }
        }
      }
    }
  }
}